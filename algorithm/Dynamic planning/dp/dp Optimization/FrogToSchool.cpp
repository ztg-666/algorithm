#include <iostream>
#include <vector>
#include <algorithm>

// 上学需要的最少跳跃能力
// 青蛙住在一条河边，家在0位置, 每天到河对岸的上学，学校在n位置
// 河里的石头排成了一条直线，青蛙每次跳跃必须落在一块石头或者岸上
// 给定一个长度为n-1的数组arr，表示1~n-1位置每块石头的高度数值
// 每次青蛙从一块石头起跳，这块石头的高度就会下降1
// 当石头的高度下降到0时，青蛙不能再跳到这块石头上，跳跃后使石头高度下降到0是允许的
// 青蛙一共需要去学校上x天课, 所以它需要往返x次，青蛙具有跳跃能力y, 它可以跳跃不超过y的距离
// 请问青蛙的跳跃能力至少是多少，才能用这些石头往返x次
// 1 <= n <= 10^5
// 1 <= arr[i] <= 10^4
// 1 <= x <= 10^9
// 测试链接 : https://www.luogu.com.cn/problem/P8775

using namespace std;

const int MAXN = 100001;
int arr[MAXN];  // 存储石头高度的数组，arr[i]表示第i个位置石头的高度
int n, x;       // n是学校位置，x是需要往返的次数

int compute() {
    int ans = 0;  // 记录最小跳跃能力（最小窗口大小）

    // 使用滑动窗口技术，窗口[l,r)表示青蛙可以跳跃的范围
    // 左闭右开区间：包含位置l，不包含位置r
    // 窗口内的累加和是sum，表示这个跳跃范围内所有石头高度的总和
    // 当r来到n+1位置时，窗口无法继续右扩，因为n位置有足够的高度

    long long sum = arr[1];  // 初始化窗口和为第1个石头的高度

    // l是窗口左边界，r是窗口右边界（不包含）
    for (int l = 1, r = 2; l <= n; l++) {
        // 扩展窗口右边界，直到窗口内石头高度总和 >= 2x
        // 2x是因为需要往返x次，每次往返需要跳跃2次
        while (sum < x * 2LL) {
            sum += arr[r++];  // 将右边界的石头高度加入窗口和，并右移边界
        }

        // 更新最小跳跃能力
        // r-l表示当前窗口大小，即青蛙的跳跃能力
        ans = max(ans, r - l);

        // 准备移动左边界：从窗口和中减去当前左边界的石头高度
        sum -= arr[l];
        // 下一轮循环l会自增，实现窗口左边界右移
    }

    return ans;
}

int main() {
    // 优化输入输出速度
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    // 读取输入
    cin >> n >> x;  // n是学校位置，x是往返次数

    // 读取1到n-1位置的石头高度
    for (int i = 1; i < n; i++) {
        cin >> arr[i];
    }

    // 特殊处理：学校位置n有足够的高度
    // 设置为2*x确保青蛙总能跳到学校
    arr[n] = 2 * x;

    // 输出结果
    cout << compute() << endl;

    return 0;
}
