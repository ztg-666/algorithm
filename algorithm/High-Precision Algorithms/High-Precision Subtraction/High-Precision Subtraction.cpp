
string s1, s2; // 定义两个字符串变量来存储输入的数字
int a1[210] = {0}, a2[210] = {0}, a3[210] = {0}; // 定义三个数组来存储数字的每一位，大小为210以处理大数

getline(cin, s1); // 从标准输入读取第一个数字字符串
getline(cin, s2); // 从标准输入读取第二个数字字符串

char flag = '+'; // 定义一个标志字符，默认为'+'
// 如果第一个数字小于第二个数字，或者两个数字大小相同但第一个数字字典序小于第二个数字，则交换两个字符串，并将标志设为'-'
if (s1.size() < s2.size() || (s1.size() == s2.size() && s1 < s2)) {
    flag = '-';
    swap(s1, s2);
}

// 将第一个数字字符串的每一位转换为整数并存储在数组a1中，从低位到高位存储
for (int i = 0; i < s1.size(); i++) {
    a1[s1.size() - i] = s1[i] - '0';
}
// 将第二个数字字符串的每一位转换为整数并存储在数组a2中，从低位到高位存储
for (int i = 0; i < s2.size(); i++) {
    a2[s2.size() - i] = s2[i] - '0';
}

// 从低位到高位进行减法运算，结果存储在数组a3中
for (int i = 1; i <= s1.size(); i++) {
    if (a1[i] < a2[i]) { // 如果当前位不够减，则从高位借1
        a1[i] += 10;
        a1[i + 1] -= 1;
    }
    a3[i] = a1[i] - a2[i]; // 计算当前位的结果
}

// 如果标志为'-'，则输出负号
if (flag == '-') {
    cout << flag;
}

int index = 0; // 定义一个索引变量来记录结果数组中第一个非零位的位置
// 找到结果数组中第一个非零位的位置
for (int i = s1.size(); i >= 1; i--) {
    if (a3[i] != 0) {
        index = i;
        break;
    }
}

// 从第一个非零位开始输出结果数组中的每一位
for (int i = index; i >= 1; i--) {
    cout << a3[i];
}
